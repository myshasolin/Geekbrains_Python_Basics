# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление
# (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
# обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться округление значения
# до целого числа.
# Сложение.Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.
class Cell:
    def __init__(self, number_of_cells):
        self.number_of_cells = number_of_cells
        self.one_cell = '*'

    def make_order(self, number_of_cells_in_a_row):
        result = ''
        for i in range(self.number_of_cells // number_of_cells_in_a_row):
            result += self.one_cell * number_of_cells_in_a_row + '\n'
        result += self.one_cell * (self.number_of_cells % number_of_cells_in_a_row)
        return result

    def __str__(self):
        return 'это функция с клетками такая'

    def __add__(self, other):
        result = self.number_of_cells + other.number_of_cells
        return f'{result} ячеек: {result * self.one_cell}'

    def __sub__(self, other):
        if self.number_of_cells > other.number_of_cells:
            result = self.number_of_cells - other.number_of_cells
            return f'{result} ячеек: {result * self.one_cell}'
        else:
            return '"разница двух клеток меньше нуля, как так-то"'

    def __mul__(self, other):
        result = self.number_of_cells * other.number_of_cells
        return f'{result} ячеек: {result * self.one_cell}'

    def __truediv__(self, other):
        result = round(self.number_of_cells / other.number_of_cells)
        return f'{result} ячеек: {result * self.one_cell}'


a = Cell(10)
print(f'первая клетка:\n{a.make_order(6)}')
b = Cell(3)
print(f'клетка вторая:\n{b.make_order(6)}')
print(f'сложим наборы и получим {a + b}')
c = Cell(2)
print(f'вычтем и получим {a - c}')
print(f'а теперь попробуем вычесть бОльшее из меньшего и получим сообщение: {c - a}')
print(f'умножим и получим {a * b}')
print(f'поделим и получим целочисленнным делением {a / b}')
print('ля какие мы молодцы')
